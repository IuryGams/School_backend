generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql" // ou "mysql", "sqlite", etc.
  url       = env("DATABASE_URL") // URL do banco de dados
  directUrl = env("DIRECT_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  lastName  String
  email     String   @unique
  password  String
  role      Roles // "admin", "teacher", "student", "parent", "coordinator"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relacionamentos
  teacher     Teacher?
  student     Student?
  parent      Parent?
  coordinator Coordinator?
  address     Address[]
}

model Address {
  id           Int      @id @default(autoincrement())
  street       String // Nome da rua
  number       String? // Número do endereço
  complement   String? // Complemento (opcional)
  neighborhood String // Bairro
  city         String // Cidade
  state        String // Estado
  CEP          String // CEP
  country      String   @default("Brasil") // País (padrão: Brasil)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relacionamentos (opcionais)
  userId Int? // Relacionamento com User (opcional)
  user   User? @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Teacher {
  id        Int        @id @default(autoincrement())
  userId    Int        @unique
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  subjects  Subject[]
  classes   Class[]
  schedules Schedule[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Coordinator {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Student {
  id          Int          @id @default(autoincrement())
  userId      Int          @unique
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  username    String
  parentId    Int
  parent      Parent       @relation(fields: [parentId], references: [id])
  accessCode  String       @unique
  enrollments Enrollment[]
  isActive    Boolean      @default(true)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Parent {
  id        Int       @id @default(autoincrement())
  userId    Int       @unique
  user      User      @relation(fields: [userId], references: [id])
  students  Student[]
  tuitions  Tuition[] // Relacionamento com Tuition
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Schedule {
  id        Int     @id @default(autoincrement())
  classId   Int
  class     Class   @relation(fields: [classId], references: [id])
  teacherId Int
  teacher   Teacher @relation(fields: [teacherId], references: [id])
  subjectId Int
  subject   Subject @relation(fields: [subjectId], references: [id])

  dayOfWeek       DayOfWeek // Enum para definir o dia da semana
  startTime       DateTime  @db.Time() // Horário de início da aula
  endTime         DateTime  @db.Time() // Horário de término da aula
  durationMinutes Int       @default(50) // Duração da aula em minutos

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Subject {
  id          Int            @id @default(autoincrement())
  name        String         @unique // Nome da matéria (ex: Matemática, Português)
  code        String         @unique // Código da disciplina (ex: MAT101)
  description String? // Breve descrição da matéria
  level       EducationLevel // Ensino Fundamental 1, 2, Médio...

  teacherId Int?
  teacher   Teacher? @relation(fields: [teacherId], references: [id]) // Quem ministra essa matéria

  classes   Class[]
  schedules Schedule[] // Aulas dessa matéria

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Class {
  id          Int          @id @default(autoincrement())
  grade       Int
  section     String       @db.Char(1) // Seção (A, B, C...)  
  subjectId   Int
  subject     Subject      @relation(fields: [subjectId], references: [id])
  teacherId   Int
  teacher     Teacher      @relation(fields: [teacherId], references: [id])
  enrollments Enrollment[]
  schedules   Schedule[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([grade, section]) // Garante que não haja duplicatas de turma
}

// Matricula
model Enrollment {
  id         Int      @id @default(autoincrement())
  studentId  Int
  student    Student  @relation(fields: [studentId], references: [id])
  classId    Int
  class      Class    @relation(fields: [classId], references: [id])
  grade      Float?
  attendance Int?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

// Mensalidade
model Tuition {
  id            Int           @id @default(autoincrement())
  parentId      Int // Relacionamento com Parent
  parent        Parent        @relation(fields: [parentId], references: [id])
  amount        Float // Valor da mensalidade
  dueDate       DateTime // Data de vencimento
  paymentDate   PaymentDates  @default(TENTH) // Dia de pagamento 
  paymentStatus PaymentStatus @default(PENDING) // Status de pagamento
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

enum Roles {
  ADMIN
  COORDINATOR
  TEACHER
  STUDENT
  PARENT
}

enum PaymentStatus {
  PAID
  PENDING
  CANCELED
  REFUNDED
}

enum PaymentDates {
  FIVE
  TENTH
  FIFTEENTH
}

enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum EducationLevel {
  FUNDAMENTAL_I
  FUNDAMENTAL_II
  HIGH_SCHOOL
}